options:
  # Send logs only to Cloud Logging
  logging: CLOUD_LOGGING_ONLY

steps:
# Build the image
- name: 'gcr.io/cloud-builders/docker'
  id: BuildImage
  args:
    [
      'build',
      '--no-cache',
      '-t', 'gcr.io/$PROJECT_ID/pantrypal:$SHORT_SHA',
      '.'
    ]

# Run the Flask app and test functionality
- name: 'gcr.io/cloud-builders/docker'
  id: TestImage
  entrypoint: bash
  args:
    - -c
    - |
      set -e

      # launch your app in the background with secrets as environment variables
      docker run -d --name smoke \
        -e FIREBASE_API_KEY=$$FIREBASE_API_KEY \
        -e FIREBASE_AUTH_DOMAIN=$$FIREBASE_AUTH_DOMAIN \
        -e FIREBASE_DATABASE_URL=$$FIREBASE_DATABASE_URL \
        -e FIREBASE_PROJECT_ID=$$FIREBASE_PROJECT_ID \
        -e FIREBASE_STORAGE_BUCKET=$$FIREBASE_STORAGE_BUCKET \
        -e FIREBASE_MESSAGING_SENDER_ID=$$FIREBASE_MESSAGING_SENDER_ID \
        -e FIREBASE_APP_ID=$$FIREBASE_APP_ID \
        -e FIREBASE_MEASUREMENT_ID=$$FIREBASE_MEASUREMENT_ID \
        -e EMAIL_SMTP_SERVER=$$EMAIL_SMTP_SERVER \
        -e EMAIL_SMTP_PORT=$$EMAIL_SMTP_PORT \
        -e EMAIL_USERNAME=$$EMAIL_USERNAME \
        -e EMAIL_PASSWORD=$$EMAIL_PASSWORD \
        gcr.io/$PROJECT_ID/pantrypal:$SHORT_SHA

      echo "Waiting up to 10s for the app to start..."
      for i in $(seq 1 10); do
        if docker exec smoke curl --silent --fail http://localhost:8080/; then
          echo "Smoke test passed!"
          docker stop smoke
          exit 0
        fi
        echo "Retry #$i..."
        sleep 1
      done

      # on failure, show the app logs
      echo "Smoke test failed; dumping container logs:"
      docker logs smoke
      docker stop smoke
      exit 1
  secretEnv: ['FIREBASE_API_KEY','FIREBASE_AUTH_DOMAIN','FIREBASE_DATABASE_URL','FIREBASE_PROJECT_ID','FIREBASE_STORAGE_BUCKET','FIREBASE_MESSAGING_SENDER_ID','FIREBASE_APP_ID','FIREBASE_MEASUREMENT_ID','EMAIL_SMTP_SERVER','EMAIL_SMTP_PORT','EMAIL_USERNAME','EMAIL_PASSWORD']

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_API_KEY/versions/latest
      env: 'FIREBASE_API_KEY'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_AUTH_DOMAIN/versions/latest
      env: 'FIREBASE_AUTH_DOMAIN'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_DATABASE_URL/versions/latest
      env: 'FIREBASE_DATABASE_URL'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_PROJECT_ID/versions/latest
      env: 'FIREBASE_PROJECT_ID'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_STORAGE_BUCKET/versions/latest
      env: 'FIREBASE_STORAGE_BUCKET'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_MESSAGING_SENDER_ID/versions/latest
      env: 'FIREBASE_MESSAGING_SENDER_ID'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_APP_ID/versions/latest
      env: 'FIREBASE_APP_ID'
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_MEASUREMENT_ID/versions/latest
      env: 'FIREBASE_MEASUREMENT_ID'
    - versionName: projects/$PROJECT_ID/secrets/EMAIL_SMTP_SERVER/versions/latest
      env: 'EMAIL_SMTP_SERVER'
    - versionName: projects/$PROJECT_ID/secrets/EMAIL_SMTP_PORT/versions/latest
      env: 'EMAIL_SMTP_PORT'
    - versionName: projects/$PROJECT_ID/secrets/EMAIL_USERNAME/versions/latest
      env: 'EMAIL_USERNAME'
    - versionName: projects/$PROJECT_ID/secrets/EMAIL_PASSWORD/versions/latest
      env: 'EMAIL_PASSWORD'
      